# How reproducible or how low the variability is between the technical replicates between the two groups
plotMA(res, ylim = c(-5,5))
# For LFC Shrinkage
library(apeglm)
resultsNames(prdds)
res2 = lfcShrink(prdds, coef = "bin_G2_vs_G1", type = "apeglm")
plotMA(res2, cex.lab = 1.4, cex.axis = 1.2, main = "MAPlot after LFC Shrinkage")
res2
res2$
res2$
res2$baseMean
res2$log2FoldChange
res2$padj
plot(res2$log2FoldChange, -log10(res2$padj))
plot(res2$log2FoldChange, -log10(res2$padj), xlim = c(-3,3))
plot(res2$log2FoldChange, -log10(res2$padj), xlim = c(-2,2), ylim = c(0,20))
plot(res2$log2FoldChange, -log10(res2$padj), xlim = c(-2,2), ylim = c(0,20), xlab = "log_2_fold_change", ylab = "-log_10_p_adjusted", main = "Volcano Plot")
plot(res2$log2FoldChange, -log10(res2$padj), xlim = c(-2,2), ylim = c(0,20), xlab = "log_2_fold_change", ylab = "-log_10_p_adjusted", main = "Volcano Plot", cex.lab = 1.4, cex.main = 1.6)
library("DESeq2")
## COUNT DATA ##
data = read.table("D:/Learning Skills/Being Scientist/Genomics/Next Generation Sequencing Technologies/Week 9/Practical/GSE246711_gene_count.txt", header = T) # Storing the read count data
rownames(data) <- data[,1]
data[,1] <- NULL
head(data)
samp = read.table("D:/Learning Skills/Being Scientist/Genomics/Next Generation Sequencing Technologies/Week 9/Practical/SampleInformation.txt", header = T) # Stores the information about grouping of technical replicates
head(samp)
samp$bin
summary(samp$bin)
levels(samp$bin)
datamatrix = as.data.frame(data)
sampmatrix = as.data.frame(samp)
## PRELIMINARY ANALYSIS ##
dds <- DESeqDataSetFromMatrix(countData = datamatrix, colData = sampmatrix, design = ~bin) # designed according to the group of technical replicates
dds
library("pheatmap") # Gives distance based correlation and hierarchical clustering in the form of a heatmap
library("RColorBrewer")
sampleDists <- dist(t(assay(rld))) # Calculates the distance between the expression profiles based on Euclidean distance, t calculates the transpose
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(rld$bin, rld$Sample, sep = "-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette(rev(brewer.pal(9, "Blues")))(255)
pheatmap(sampleDistMatrix, clustering_distance_rows = sampleDists, clustering_distance_cols = sampleDists, col = colors)
sampleDists <- dist(t(assay(rld))) # Calculates the distance between the expression profiles based on Euclidean distance, t calculates the transpose
# Check the correlation between technical replicates
lims <- c(-2, 20) # Setting the range of x and y axis
plot(assay(rld)[,1:2], pch = 16, cex = 0.3, main = "rlog", xlim = lims, ylim = lims)
rld <- rlog(dds, blind = FALSE) # Carrying out r-log transformation to reduce variability of genes that have low read counts
# For log transformed data we use euclidean distance while if raw counts are used we have to use poisson distance
head(assay(rld), 3)
# Check the correlation between technical replicates
lims <- c(-2, 20) # Setting the range of x and y axis
plot(assay(rld)[,1:2], pch = 16, cex = 0.3, main = "rlog", xlim = lims, ylim = lims)
rld
library("pheatmap") # Gives distance based correlation and hierarchical clustering in the form of a heatmap
library("RColorBrewer")
sampleDists <- dist(t(assay(rld))) # Calculates the distance between the expression profiles based on Euclidean distance, t calculates the transpose
sampleDists
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(rld$bin, rld$Sample, sep = "-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette(rev(brewer.pal(9, "Blues")))(255)
pheatmap(sampleDistMatrix, clustering_distance_rows = sampleDists, clustering_distance_cols = sampleDists, col = colors)
library("PoiClaClu")
## BIAS CORRECTION ##
library("EDASeq")
data("yeastGC")
data("yeastLength")
sub <- intersect(rownames(data), names(yeastGC)) # taking in account the rows which match with 'yeastGC' as we want their GC content data
mat <- as.matrix(data[sub, ]) # Keeping the matrix information for matched rownames
newdata <- newSeqExpressionSet(mat, normalizedCounts = matrix(data = NA, nrow(mat), ncol = ncol(mat), dimnames = dimnames(mat)),
phenoData = AnnotatedDataFrame(data.frame(conditions = factor(c("G1","G1","G1","G2","G2","G2")),
row.names = colnames(data))),
featureData = AnnotatedDataFrame(data.frame(gc = yeastGC[sub])))
norm <- withinLaneNormalization(newdata, "gc", which = "full", round = TRUE, offset = FALSE) # offset FALSE gives the normalized raw counts
biasPlot(newdata, "gc")
norm2 <- as.data.frame(normCounts(norm))
write.table(norm2, "D:/Learning Skills/Being Scientist/Genomics/Next Generation Sequencing Technologies/Week 9/Practical/BiasCorrected.txt", quote = F, sep = "\t") # quote F means we don't want double quotes around our data
plotRLE(newdata)
plotRLE(norm)
## DIFFERENTIAL GENE EXPRESSION ANALYSIS ##
bias_corrected_data <- read.table("D:/Learning Skills/Being Scientist/Genomics/Next Generation Sequencing Technologies/Week 9/Practical/BiasCorrected.txt", header = T)
bias_corrected_data_matrix = as.data.frame(bias_corrected_data)
dds <- DESeqDataSetFromMatrix(countData = bias_corrected_data_matrix, colData = sampmatrix, design = ~bin)
dds
prdds <- DESeq(dds)
prdds
res <- results(prdds)
res
# MA Plot
# The significance analysis depends on two things:
# The effect size or how much different the expression is between the two types of groups
# How reproducible or how low the variability is between the technical replicates between the two groups
plotMA(res, ylim = c(-5,5))
# For LFC Shrinkage
library(apeglm)
resultsNames(prdds)
res2 = lfcShrink(prdds, coef = "bin_G2_vs_G1", type = "apeglm")
plotMA(res2, cex.lab = 1.4, cex.axis = 1.2, main = "MAPlot after LFC Shrinkage")
summary(res)
library(RUVSeq)
plot(res2$log2FoldChange, -log10(res2$padj), xlim = c(-2,2), ylim = c(0,20), xlab = "log_2_fold_change", ylab = "-log_10_p_adjusted", main = "Volcano Plot", cex.lab = 1.4, cex.main = 1.6)
plot(res2$log2FoldChange, -log10(res2$padj), xlim = c(-2,2), ylim = c(0,20), xlab = "log_2_fold_change", ylab = "-log_10_p_adjusted", main = "Volcano Plot", cex.lab = 1.4, cex.main = 1.6, pch = 16, col = rgb(0.3, 0.3, 0.3, 0.3))
abline(h = 1, lwd = 1.2, col = "blue")
abline(h = 1, lwd = 2, lty = 2, col = "blue")
plot(res2$log2FoldChange, -log10(res2$padj), xlim = c(-2,2), ylim = c(0,20), xlab = "log_2_fold_change", ylab = "-log_10_p_adjusted", main = "Volcano Plot", cex.lab = 1.4, cex.main = 1.6, pch = 16, col = rgb(0.3, 0.3, 0.3, 0.3))
abline(h = 1, lwd = 2, lty = 2, col = "blue")
plot(res2$log2FoldChange, -log10(res2$padj), xlim = c(-2,2), ylim = c(0,20), xlab = "log_2_fold_change", ylab = "-log_10_p_adjusted", main = "Volcano Plot", cex.lab = 1.4, cex.main = 1.6, pch = 16, col = "white")
abline(h = 1, lwd = 2, lty = 2, col = "blue")
points(res2$log2FoldChange[which(-log10(res2$padj) <= 1)], -log10(res2$padj)[which(-log10(res2$padj) <= 1)], pch = 16, col = rgb(0.3, 0.3, 0.3, 0.3))
points(res2$log2FoldChange[which(-log10(res2$padj) > 1)], -log10(res2$padj)[which(-log10(res2$padj) > 1)], pch = 16, col = rgb(0.5, 0, 0, 0.3))
dev.copy2pdf(file = "D:/Learning Skills/Being Scientist/Genomics/Next Generation Sequencing Technologies/Week 9/Practical/Volcano.pdf")
BiocManager::install("gplots")
library(gplots)
data
hmap = read.table("D:/Learning Skills/Being Scientist/Genomics/Next Generation Sequencing Technologies/Week 9/Practical/GSE246711_gene_count.txt", header = T)
head(hmap)
hmap2 = as.matrix(hmap[-1])
head(hmap2)
heatmap.2(hmap2)
heatmap.2(hmap2, trace = "none", scale = "row") # trace removes the lines, the genes which show high expression dominate the clustering process. To normalize, scaling is performed bringing the expression to the same level i.e. similar weight in the clustering process
install.packages("gprofiler2")
library(gprofiler2)
res2
enriches <- gost(query = lst,
organism = "scerevisiae", ordered_query = FALSE,
multi_query = FALSE, significant = TRUE, exclude_iea = FALSE,
measure_underrepresentation = FALSE, evcodes = FALSE,
user_threshold = 0.05, correction_method = "g_SCS",
domain_scope = "annotated", custom_bg = NULL,
numeric_ns = "", sources = NULL, as_short_link = FALSE,
highlight = TRUE)
lst = c("YLR044C", "YGL008C", "YLR249W", "Q0115", "Q0144", "YKL060C") # Randomly choosing genes for enrichment
enriches <- gost(query = lst,
organism = "scerevisiae", ordered_query = FALSE,
multi_query = FALSE, significant = TRUE, exclude_iea = FALSE,
measure_underrepresentation = FALSE, evcodes = FALSE,
user_threshold = 0.05, correction_method = "g_SCS",
domain_scope = "annotated", custom_bg = NULL,
numeric_ns = "", sources = NULL, as_short_link = FALSE,
highlight = TRUE)
names(enriches)
head(enriches$result, 5)
names(enriches$result)
x = c(3,1,7,4,-1,8)
x[3]-x[1]
x[2:3]
seq(1,6)
seq(1,6,2)
x[x>=5]
x[x==7]
x[x!=7]
# Sometimes you'll want to know the locations of the elements of x that are greater than or equal to 5.
which(x>=5)
x>=5
y = c(2,7,-2,4,0,3.3)
x
y
y[x==7]
x[(x>1 & x<7)| x<0]
sum(x)
prod(x)
length(x)
mean(x)
exp(x)
log(x)    # A warning is expected here!
sqrt(x)   # A warning is expected here!
var(x)
(sum(x^2)-sum(x)^2/length(x))/(length(x)-1)
{
print(i)
}
for (i in 1:3)
{
print(i)
}
for (i in 1:length(x))
{
x[i] = x[i]+i
}
x
i = 1
while(i < 4)
{
print(i)
i = i+1
}
y = rep(0,length(x))
for (i in 1:length(x))
{
if(x[i]<=5)
{
y[i] = 1
}
else
{
y[i] = -1
}
}
y
y<-rep(-1,length(x))
y[x <= 5]<-1
y
A = matrix(0,6,6)
A
A[1,] = x
A[2,] = y
A[3,] = x+y
A
print(A*A) # elementwise multiplication
print(A%*%A) # matrix multiplication
dogs<-read.table("dogs")
dogs<-read.table("mtcars")
cars <- load(mtcars)
cars <- load("mtcars")
cars <- View(mtcars)
cars
cars <- mtcars
cars
cars$mpg
dim(cars)
dim(cars)[1]
cars$mpg[cars$mpg > 15]
mean(cars$mpg)
mean(cars$mpg[cars$mpg > 15])
plot(cars$mpg, cars$cyl)
plot(cars$mpg, cars$disp)
plot(cars$mpg, cars$disp, xlab = "mpg", ylab = "disp", main = "Plot", pch = 19, col = "blue")
cars$disp
points(21, 160, pch = 19, col = "red")
hist(cars$mpg, main = "Histogram")
hist(cars$mpg, probability = T)
# Let's check out the proportion of cars in our sample whose mpg is less than 15 units.
length(cars$mpg[cars$mpg<15])/length(cars$mpg)
br <- seq(10,35,2)
hist(cars$mpg, probability = T, breaks = br)
br <- seq(10,40,2)
hist(cars$mpg, probability = T, breaks = br)
br <- seq(10,36,2)
hist(cars$mpg, probability = T, breaks = br)
N = 10
birthdays = sample(1:365, size=N, replace = TRUE)
birthdays
share = FALSE
if(length(unique(birthdays)) < length(birthdays))
{
share = TRUE
}
share
# Number of repetitions of our simulated experiment
numreps = 100
# Initialize a Boolean vector with all FALSE values
share = rep(FALSE,numreps)
# Start the simulation
for(i in 1:numreps)
{
birthdays = sample(1:365, size=N, replace = TRUE)
if(length(unique(birthdays)) < length(birthdays))
{
share[i] = TRUE
}
}
sum(share)/numreps  #proportion of runs that have duplicate birthdays
N = 10
perm = choose(365, 365-N) * factorial(N)
return (1 - perm/(365 ^ N))
(1 - perm/(365 ^ N))
N = 23
perm = choose(365, 365-N) * factorial(N)
return (1 - perm/(365 ^ N))
(1 - perm/(365 ^ N))
N = 1:40
the.probability = rep(0,40)
for(i in 1:40)
{
# Your code here
perm = choose(365, 365-i) * factorial(i)
the.probability[i] = 1 - (perm/(365 ^ i))
}
plot(N,the.probability)
numrolls = 100
x = sample(1:6,numrolls,replace=TRUE)
# Run this cell to tabulate the counts for each outcome 1 through 6
table(x)
# Run this cell to get the proportions
table(x)/numrolls
# Your code here
numreps = 100
x = sample(1:6, numreps, replace = TRUE)
y = sample(1:6, numreps, replace = TRUE)
z = x + y
greater_than_five = rep(FALSE, numreps)
for(i in 1:numreps)
{
if(z[i] >= 5)
{
greater_than_five[i] = TRUE
}
}
sum(greater_than_five)/numreps
prob = 30 / 36
prob
S = c(000, 100, 010, 001, 110, 101, 011, 111)
A = c(100, 101, 110, 111)
B = c(010, 110, 011, 111)
C = c(001, 011, 101, 111)
p1.1 = 0.3 + 0.45 + 0.4 - 0.2 - 0.25 - 0.12 + 0.07
p1.2 = 1 - p1.1
p1.3 = 0.25 - 0.07
cardinality = 5 ^ 20
binomial_probability <- function(k)
{
choose(20, k) * (1/5)^k * (4/5)^(20-k)
}
p2.b = round(sum(sapply(14:20, binomial_probability)), 7)
binomial_probability <- function(k)
{
choose(20, k) * (0.9)^k * (1-0.9)^(20-k)
}
p2.c = round(sum(sapply(14:20, binomial_probability)), 4)
Size = choose(45, 6)
P_AllDay = round(choose(20, 6) / choose(45, 6), 5)
P_AllSame = round((choose(20, 6) + choose(15, 6) + choose(10, 6)) / choose(45, 6), 4)
P_NoneOfOneShift = round((choose(25, 6) + choose(30, 6) + choose(35, 6) - choose(10, 6) - choose(20, 6) - choose(15, 6)) / choose(45, 6), 4)
#replicate
set.seed(110)
sims = 1000
#define different values of n to iterate over
n = 2:10
#set paths for the empirical and analytical solutions
sol.a = rep(NA, length(n))
sol.e = rep(NA, length(n))
#iterate over n
for(j in 1:length(n)){
#first, calculate the analytical solution
k = 1:n[j]
sol.a[j] = sum((1/factorial(k))*(-1)^(k + 1))
#now run the empirical simulation
#indicate if we get a match or not
match = rep(0, sims)
#run the loop
for(i in 1:sims){
#generate the 'random order' to give the babies out
babies = sample(1:n[j])
#calculate 'ratios' of couple-to-baby. If the couple gets
#   their baby, ratio should be 1
ratios = babies/(1:n[j])
#see if we got a match (at least 1 ratio is 1)
if(length(ratios[ratios == 1]) > 0){
match[i] = 1
}
}
#mark the empirical probability
sol.e[j] = mean(match)
}
#graphics
plot(n, sol.a, main = "Hospital Matching Problem",
xlab = "n", ylab = "P(At Least One Match)",
type = "p", lwd = 3, col = "firebrick3",
ylim = c(0, 1), pch = 16)
lines(n, sol.e, col = "black", lwd = 3,
type = "p", pch = 16)
#put in the asymptotic result
abline(h = 1 - 1/exp(1))
#legend
legend("topright", legend = c("Empirical Result", "Analytical Result"),
lty=c(2,2), lwd=c(2.5,2.5),
col=c("black", "red"))
rmsd <- read.csv2('Desktop/RMSDALL.xlsx')
rmsd <- read.csv2('Desktop/RMSDALL.xlsx', header = T)
rmsd
rmsd <- read.csv2('Desktop/RMSDALL.xlsx', header = T)
rmsd
rmsd <- read.csv('Desktop/RMSDALL.xlsx', header = T)
rmsd
rmsd <- read.table('Desktop/RMSDALL.xlsx', header = T)
rmsd
library(readxl)
install.packages("readxl")
library(readxl)
rmsd <- read_excel('Desktop/RMSDALL.xlsx')
rmsd
install.packages("xlsx")
library(xlsx)
rmsd <- read_excel('Desktop/RMSDALL.xlsx')
rmsd
rmsd <- read.xlsx('Desktop/RMSDALL.xlsx')
rmsd
rmsd <- df(rmsd)
rmsd <- data.frame(rmsd)
rmsd
rmsd[:1]
rmsd[:,1]
rmsd[,1]
rmsd[,2]
rmsd[,-1]
plot(rmsd[,1], rmsd[,-1])
plot(rmsd[,1], rmsd[,2])
help(plot)
line(rmsd[,1], rmsd[,2], )
plot(rmsd[,1], rmsd[,2], type = "p")
plot(rmsd[,1], rmsd[,2], type = "p", xlim = c(0:100), ylim = c(0:5), main = "RMSD Plot", xlab = "Time(ns)", ylab = "RMSD", col = "blue")
plot(rmsd[,1], rmsd[,2], type = "p", xlim = c(1:100), ylim = c(0:5), main = "RMSD Plot", xlab = "Time(ns)", ylab = "RMSD", col = "blue")
plot(rmsd[,1], rmsd[,2], type = "p", xlim = seq(0,100,5), ylim = c(0:5), main = "RMSD Plot", xlab = "Time(ns)", ylab = "RMSD", col = "blue")
plot(rmsd[,1], rmsd[,2], type = "p", ylim = c(0:5), main = "RMSD Plot", xlab = "Time(ns)", ylab = "RMSD", col = "blue")
plot(rmsd[,1], rmsd[,2], type = "p", xlim = c(0,100), ylim = c(0,5), main = "RMSD Plot", xlab = "Time(ns)", ylab = "RMSD", col = "blue")
plot(rmsd[,1], rmsd[,2], type = "p", xlim = c(0,100), ylim = c(0,5), main = "RMSD Plot", xlab = "Time(ns)", ylab = "RMSD", col = "blue", cex.main = 1.3)
plot(rmsd[,1], rmsd[,2], type = "p", xlim = c(0,100), ylim = c(0,5), main = "RMSD Plot", xlab = "Time(ns)", ylab = "RMSD", col = "blue", cex.main = 1.3, cex.sub = 1.3)
plot(rmsd[,1], rmsd[,2], type = "p", xlim = c(0,100), ylim = c(0,5), main = "RMSD Plot", xlab = "Time(ns)", ylab = "RMSD", col = "blue", cex.main = 1.3, cex.sub = 1.9)
plot(rmsd[,1], rmsd[,2], type = "p", xlim = c(0,100), ylim = c(0,5), main = "RMSD Plot", xlab = "Time(ns)", ylab = "RMSD", col = "blue", cex.main = 1.3, cex.lab = 1.3)
lines(rmsd[,1], rmsd[,3])
lines(rmsd[,1], rmsd[,3], type = "p", col = "orange")
lines(rmsd[,1], rmsd[,4], type = "p", col = "grey")
plot(rmsd[,1], rmsd[,2], xlim = c(0,100), ylim = c(0,5), main = "RMSD Plot", xlab = "Time(ns)", ylab = "RMSD", col = "blue", cex.main = 1.3, cex.lab = 1.3)
plot(rmsd[,1], rmsd[,2], pch = 19, xlim = c(0,100), ylim = c(0,5), main = "RMSD Plot", xlab = "Time(ns)", ylab = "RMSD", col = "blue", cex.main = 1.3, cex.lab = 1.3)
lines(rmsd[,1], rmsd[,3], pch = 19, col = "orange")
lines(rmsd[,1], rmsd[,4], pch = 19, col = "grey")
plot(rmsd[,1], rmsd[,2], pch = 19, xlim = c(0,100), ylim = c(0,5), main = "RMSD Plot", xlab = "Time(ns)", ylab = "RMSD", col = "blue", cex.main = 1.3, cex.lab = 1.3)
lines(rmsd[,1], rmsd[,3], pch = 19, col = "orange")
lines(rmsd[,1], rmsd[,4], pch = 19, col = "grey")
lines(rmsd[,1], rmsd[,2], pch = 19, xlim = c(0,100), ylim = c(0,5), main = "RMSD Plot", xlab = "Time(ns)", ylab = "RMSD", col = "blue", cex.main = 1.3, cex.lab = 1.3)
plot(rmsd[,1], rmsd[,2], pch = 19, xlim = c(0,100), ylim = c(0,5), main = "RMSD Plot", xlab = "Time(ns)", ylab = "RMSD", col = "blue", cex.main = 1.3, cex.lab = 1.3)
plot(rmsd[,1], rmsd[,3], pch = 19, col = "orange")
plot(rmsd[,1], rmsd[,2], pch = 19, xlim = c(0,100), ylim = c(0,5), main = "RMSD Plot", xlab = "Time(ns)", ylab = "RMSD", col = "blue", cex.main = 1.3, cex.lab = 1.3)
points(rmsd[,1], rmsd[,3], pch = 19, col = "orange")
points(rmsd[,1], rmsd[,4], pch = 19, col = "grey")
help(legend)
legend(legend = c(rmsd[,2], rmsd[,3], rmsd[,4]),"topright")
rmsd[,2][0]
rmsd[,2][1]
plot(rmsd[,1], rmsd[,2], pch = 19, xlim = c(0,100), ylim = c(0,5), main = "RMSD Plot", xlab = "Time(ns)", ylab = "RMSD", col = "blue", cex.main = 1.3, cex.lab = 1.3)
points(rmsd[,1], rmsd[,3], pch = 19, col = "orange")
points(rmsd[,1], rmsd[,4], pch = 19, col = "grey")
legend(legend = c("9g_rmsd", "9i_rmsd", "9l_rmsd"),"topright", col = c("blue", "orange", "grey"))
help(legend)
legend(legend = c("9g_rmsd", "9i_rmsd", "9l_rmsd"),"topright", pch = 19 ,col = c("blue", "orange", "grey"))
legend(legend = c("9g_rmsd", "9i_rmsd", "9l_rmsd"), text.font = 4, "topright", pch = 19 ,col = c("blue", "orange", "grey"))
lines(rmsd[,1], rmsd[,2], lty = 4, xlim = c(0,100), ylim = c(0,5), main = "RMSD Plot", xlab = "Time(ns)", ylab = "RMSD", col = "blue", cex.main = 1.3, cex.lab = 1.3)
plot(rmsd[,1], rmsd[,2], lty = 4, xlim = c(0,100), ylim = c(0,5), main = "RMSD Plot", xlab = "Time(ns)", ylab = "RMSD", col = "blue", cex.main = 1.3, cex.lab = 1.3)
plot(rmsd[,1], rmsd[,2], type = "o",lty = 4, xlim = c(0,100), ylim = c(0,5), main = "RMSD Plot", xlab = "Time(ns)", ylab = "RMSD", col = "blue", cex.main = 1.3, cex.lab = 1.3)
plot(rmsd[,1], rmsd[,2], type = "o",lty = 4, xlim = c(0,100), ylim = c(0,5), main = "RMSD Plot", xlab = "Time(ns)", ylab = "RMSD", col = "blue", cex.main = 1.3, cex.lab = 1.3)
plot(rmsd[,1], rmsd[,2], type = "l",lty = 4, xlim = c(0,100), ylim = c(0,5), main = "RMSD Plot", xlab = "Time(ns)", ylab = "RMSD", col = "blue", cex.main = 1.3, cex.lab = 1.3)
plot(rmsd[,1], rmsd[,2], type = "l",lwd = 4, xlim = c(0,100), ylim = c(0,5), main = "RMSD Plot", xlab = "Time(ns)", ylab = "RMSD", col = "blue", cex.main = 1.3, cex.lab = 1.3)
lines(rmsd[,1], rmsd[,3], type = "l", lwd = 4, col = "orange")
points(rmsd[,1], rmsd[,4], type = "l", lwd = 4, col = "grey")
legend(legend = c("9g_rmsd", "9i_rmsd", "9l_rmsd"), text.font = 4, "topright", pch = 19 ,col = c("blue", "orange", "grey"))
doors = sample(c(1, 0, 0))
doors
doors
doors = sample(c(1, 0, 0))
doors
doors[1]
sample(c(1, 0, 0))
sample(c(1, 0, 0))
sample(c(1, 0, 0))
car = rep(NA, 1000)
car = which(doors == 1)
car
car = which(doors == 1)
car
car = which(doors == 1)
car
#replicate
set.seed(110)
sims = 1000
#door that monty opens
monty = rep(NA, sims)
#keep track of where the car is
car = rep(NA, sims)
#run the loop
for(i in 1:sims){
#generate the doors randomly; 1 is the car, 0 is a goat
doors = sample(c(1, 0, 0))
#mark where the car is
car[i] = which(doors == 1)
#if we picked the car, monty opens another door at random
if(car[i] == 1){
monty[i] = sample(c(2, 3), 1)
}
#if we picked a goat, monty opens the other goat door
if(car[i] != 1){
#label the picked door; always pick door 1
doors[1] = 1
#monty picks the other goat
monty[i] = which(doors == 0)
}
}
car
monty
# Mantel test in R
setwd("F:\\Project\\MSc Project\\Identifying predominant mutations in Coronavirus and related families\\HBV")
library(vegan)
library(readxl)
prot_selc_press <- read_excel("pam_250_selc_press_wr.xlsx")
head(prot_selc_press)
control <- read_excel("pam_250_control_wr.xlsx")
head(control)
pam <- read_excel("pam_250_wr.xlsx")
head(pam)
dist1 <- dist(prot_selc_press, method = "euclidean")
head(dist1)
dist2 <- dist(control, method = "euclidean")
head(dist2)
dist3 <- dist(pam, method = "euclidean")
head(dist3)
comp1 <- mantel(dist1, dist3, method = "spearman", permutations = 9999, na.rm = TRUE)
comp1
comp2 <- mantel(dist1, dist2, method = "spearman", permutations = 9999, na.rm = TRUE)
comp2
comp1 <- mantel(dist1, dist3, method = "spearman", permutations = 9999, na.rm = TRUE)
comp1
comp2 <- mantel(dist2, dist3, method = "spearman", permutations = 9999, na.rm = TRUE)
comp2
